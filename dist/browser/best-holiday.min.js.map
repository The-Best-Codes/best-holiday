{
  "version": 3,
  "sources": ["../../src/index.ts", "../../src/browser.ts"],
  "sourcesContent": ["// Private data and helper functions\nconst holidays = [\n  {\n    name: \"New Year's Day\",\n    date: (year: any) => new Date(year, 0, 1),\n    type: \"public\",\n    country: \"global\",\n  },\n  {\n    name: \"Christmas Day\",\n    date: (year: any) => new Date(year, 11, 25),\n    type: \"religious\",\n    country: \"global\",\n  },\n  {\n    name: \"Valentine's Day\",\n    date: (year: any) => new Date(year, 1, 14),\n    type: \"observance\",\n    country: \"global\",\n  },\n  {\n    name: \"Independence Day\",\n    date: (year: any) => new Date(year, 6, 4),\n    type: \"public\",\n    country: \"US\",\n  },\n  {\n    name: \"Halloween\",\n    date: (year: any) => new Date(year, 9, 31),\n    type: \"observance\",\n    country: \"US\",\n  },\n  {\n    name: \"Boxing Day\",\n    date: (year: any) => new Date(year, 11, 26),\n    type: \"public\",\n    country: \"UK, Canada\",\n  },\n  {\n    name: \"Canada Day\",\n    date: (year: any) => new Date(year, 6, 1),\n    type: \"public\",\n    country: \"Canada\",\n  },\n  {\n    name: \"Australia Day\",\n    date: (year: any) => new Date(year, 0, 26),\n    type: \"public\",\n    country: \"Australia\",\n  },\n  {\n    name: \"Victoria Day\",\n    date: (year: any) => {\n      const d = new Date(year, 4, 25);\n      while (d.getDay() !== 1) {\n        d.setDate(d.getDate() - 1);\n      }\n      return d;\n    },\n    type: \"public\",\n    country: \"Canada\",\n  },\n  {\n    name: \"Remembrance Day\",\n    date: (year: any) => new Date(year, 10, 11),\n    type: \"public\",\n    country: \"Canada, UK\",\n  },\n  {\n    name: \"St. Patrick's Day\",\n    date: (year: any) => new Date(year, 2, 17),\n    type: \"observance\",\n    country: \"Ireland\",\n  },\n  {\n    name: \"Bastille Day\",\n    date: (year: any) => new Date(year, 6, 14),\n    type: \"public\",\n    country: \"France\",\n  },\n  {\n    name: \"Cinco de Mayo\",\n    date: (year: any) => new Date(year, 4, 5),\n    type: \"public\",\n    country: \"Mexico\",\n  },\n  {\n    name: \"Groundhog Day\",\n    date: (year: any) => new Date(year, 1, 2),\n    type: \"observance\",\n    country: \"US\",\n  },\n];\n\nconst movableHolidays: any = [\n  {\n    name: \"Easter Sunday\",\n    calculate: (year: any) => {\n      // Easter calculation algorithm (Meeus/Jones/Butcher algorithm)\n      const a = year % 19;\n      const b = Math.floor(year / 100);\n      const c = year % 100;\n      const d = Math.floor(b / 4);\n      const e = b % 4;\n      const f = Math.floor((b + 8) / 25);\n      const g = Math.floor((b - f + 1) / 3);\n      const h = (19 * a + b - d - g + 15) % 30;\n      const i = Math.floor(c / 4);\n      const k = c % 4;\n      const l = (32 + 2 * e + 2 * i - h - k) % 7;\n      const m = Math.floor((a + 11 * h + 22 * l) / 451);\n      const month = Math.floor((h + l - 7 * m + 114) / 31) - 1;\n      const day = ((h + l - 7 * m + 114) % 31) + 1;\n      return new Date(year, month, day);\n    },\n    type: \"religious\",\n    country: \"global\",\n  },\n  {\n    name: \"Ash Wednesday\",\n    calculate: (year: any) => {\n      const easterSunday = movableHolidays\n        .find((h: any) => h.name === \"Easter Sunday\")\n        .calculate(year);\n      return addDays(easterSunday, -46);\n    },\n    type: \"religious\",\n    country: \"global\",\n  },\n  {\n    name: \"Palm Sunday\",\n    calculate: (year: any) => {\n      const easterSunday = movableHolidays\n        .find((h: any) => h.name === \"Easter Sunday\")\n        .calculate(year);\n      return addDays(easterSunday, -7);\n    },\n    type: \"religious\",\n    country: \"global\",\n  },\n  {\n    name: \"Pentecost\",\n    calculate: (year: any) => {\n      const easterSunday = movableHolidays\n        .find((h: any) => h.name === \"Easter Sunday\")\n        .calculate(year);\n      return addDays(easterSunday, 49);\n    },\n    type: \"religious\",\n    country: \"global\",\n  },\n  {\n    name: \"Ascension Day\",\n    calculate: (year: any) => {\n      const easterSunday = movableHolidays\n        .find((h: any) => h.name === \"Easter Sunday\")\n        .calculate(year);\n      return addDays(easterSunday, 39);\n    },\n    type: \"religious\",\n    country: \"global\",\n  },\n  {\n    name: \"Mother's Day\",\n    calculate: (year: any) => {\n      const may = new Date(year, 4, 1);\n      const firstSunday = new Date(may.setDate(1 + ((7 - may.getDay()) % 7)));\n      const secondSunday = new Date(\n        firstSunday.setDate(firstSunday.getDate() + 7)\n      );\n      return secondSunday;\n    },\n    type: \"observance\",\n    country: \"global\",\n  },\n  {\n    name: \"Father's Day\",\n    calculate: (year: any) => {\n      const june = new Date(year, 5, 1);\n      const firstSunday = new Date(june.setDate(1 + ((7 - june.getDay()) % 7)));\n      const thirdSunday = new Date(\n        firstSunday.setDate(firstSunday.getDate() + 14)\n      );\n      return thirdSunday;\n    },\n    type: \"observance\",\n    country: \"global\",\n  },\n  {\n    name: \"Thanksgiving\",\n    calculate: (year: any) => {\n      const d = new Date(year, 10, 1);\n      while (d.getDay() !== 4) {\n        d.setDate(d.getDate() + 1);\n      }\n      d.setDate(d.getDate() + 21);\n      return d;\n    },\n    type: \"public\",\n    country: \"US\",\n  },\n  {\n    name: \"Labor Day\",\n    calculate: (year: any) => {\n      const d = new Date(year, 8, 1);\n      while (d.getDay() !== 1) {\n        d.setDate(d.getDate() + 1);\n      }\n      return d;\n    },\n    type: \"public\",\n    country: \"US\",\n  },\n  {\n    name: \"Memorial Day\",\n    calculate: (year: any) => {\n      const d = new Date(year, 4, 31);\n      while (d.getDay() !== 1) {\n        d.setDate(d.getDate() - 1);\n      }\n      return d;\n    },\n    type: \"public\",\n    country: \"US\",\n  },\n  {\n    name: \"Veterans Day\",\n    calculate: (year: any) => new Date(year, 10, 11),\n    type: \"public\",\n    country: \"US\",\n  },\n  {\n    name: \"Martin Luther King Jr. Day\",\n    calculate: (year: any) => {\n      const d = new Date(year, 0, 1);\n      while (d.getDay() !== 1) {\n        d.setDate(d.getDate() + 1);\n      }\n      d.setDate(d.getDate() + 14);\n      return d;\n    },\n    type: \"public\",\n    country: \"US\",\n  },\n  {\n    name: \"Good Friday\",\n    calculate: (year: any) => {\n      const easterSunday = movableHolidays\n        .find((h: any) => h.name === \"Easter Sunday\")\n        .calculate(year);\n      return addDays(easterSunday, -2);\n    },\n    type: \"religious\",\n    country: \"global\",\n  },\n];\n\nfunction addDays(date: any, days: any) {\n  const result = new Date(date);\n  result.setDate(result.getDate() + days);\n  return result;\n}\n\nfunction isSameDay(date1: any, date2: any) {\n  return (\n    date1.getFullYear() === date2.getFullYear() &&\n    date1.getMonth() === date2.getMonth() &&\n    date1.getDate() === date2.getDate()\n  );\n}\n\nfunction getHolidaysForDay(date: Date, filters: any = {}) {\n  const year = date.getFullYear();\n  let allHolidays = [...holidays, ...movableHolidays];\n\n  // Apply filters\n  if (filters.types) {\n    const typeFilter = Array.isArray(filters.types)\n      ? filters.types\n      : [filters.types];\n    allHolidays = allHolidays.filter((h) => typeFilter.includes(h.type));\n  }\n  if (filters.countries) {\n    const countryFilter = Array.isArray(filters.countries)\n      ? filters.countries\n      : [filters.countries];\n    allHolidays = allHolidays.filter((h) => countryFilter.includes(h.country));\n  }\n\n  return allHolidays\n    .filter((holiday) => {\n      const holidayDate = holiday.calculate\n        ? holiday.calculate(year)\n        : typeof holiday.date === \"function\"\n        ? holiday.date(year)\n        : holiday.date;\n      return isSameDay(holidayDate, date);\n    })\n    .map((holiday) => ({\n      ...holiday,\n      date: holiday.calculate\n        ? holiday.calculate(year)\n        : typeof holiday.date === \"function\"\n        ? holiday.date(year)\n        : holiday.date,\n    }));\n}\n\nfunction getHolidaysInRange(startDate: Date, endDate: Date, filters = {}) {\n  const result = [];\n  let currentDate = new Date(startDate);\n\n  while (currentDate <= endDate) {\n    const holidaysForDay = getHolidaysForDay(currentDate, filters);\n    if (holidaysForDay.length > 0) {\n      result.push({\n        date: new Date(currentDate),\n        holidays: holidaysForDay,\n      });\n    }\n    currentDate = addDays(currentDate, 1);\n  }\n\n  return result;\n}\n\nfunction searchHolidays(query: string, year: number, filters: any = {}) {\n  const lowercaseQuery = query.toLowerCase();\n  let allHolidays = [...holidays, ...movableHolidays];\n\n  // Apply filters\n  if (filters.types) {\n    const typeFilter = Array.isArray(filters.types)\n      ? filters.types\n      : [filters.types];\n    allHolidays = allHolidays.filter((h) => typeFilter.includes(h.type));\n  }\n  if (filters.countries) {\n    const countryFilter = Array.isArray(filters.countries)\n      ? filters.countries\n      : [filters.countries];\n    allHolidays = allHolidays.filter((h) => countryFilter.includes(h.country));\n  }\n\n  return allHolidays\n    .filter(\n      (holiday) =>\n        holiday.name.toLowerCase().includes(lowercaseQuery) ||\n        holiday.type.toLowerCase().includes(lowercaseQuery) ||\n        holiday.country.toLowerCase().includes(lowercaseQuery)\n    )\n    .map((holiday) => ({\n      ...holiday,\n      date: holiday.calculate\n        ? holiday.calculate(year)\n        : typeof holiday.date === \"function\"\n        ? holiday.date(year)\n        : holiday.date,\n    }));\n}\n\nfunction getEasterRelatedHoliday(year: number, offsetDays: number = 0) {\n  const easterSunday = movableHolidays\n    .find((h: any) => h.name === \"Easter Sunday\")\n    .calculate(year);\n  return addDays(easterSunday, offsetDays);\n}\n\nfunction addHoliday(holiday: any) {\n  if (\n    typeof holiday.date === \"function\" ||\n    typeof holiday.calculate === \"function\"\n  ) {\n    holidays.push(holiday);\n  } else {\n    throw new Error(\"Holiday must have a date function or calculate function\");\n  }\n}\n\nfunction removeHoliday(holidayName: any) {\n  const index = holidays.findIndex((h) => h.name === holidayName);\n  if (index !== -1) {\n    holidays.splice(index, 1);\n  }\n}\n\nexport {\n  getHolidaysForDay,\n  getHolidaysInRange,\n  searchHolidays,\n  getEasterRelatedHoliday,\n  addHoliday,\n  removeHoliday,\n};\n", "import * as BestHoliday from \"./index\";\n\n// Expose the functions to the global scope\n(window as any).BestHoliday = BestHoliday;\n"],
  "mappings": "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",
  "names": ["src_exports", "__export", "addHoliday", "getEasterRelatedHoliday", "getHolidaysForDay", "getHolidaysInRange", "removeHoliday", "searchHolidays", "holidays", "year", "d", "movableHolidays", "b", "c", "e", "f", "g", "h", "i", "k", "l", "m", "month", "day", "easterSunday", "addDays", "may", "firstSunday", "june", "date", "days", "result", "isSameDay", "date1", "date2", "getHolidaysForDay", "filters", "allHolidays", "typeFilter", "countryFilter", "holiday", "holidayDate", "__spreadProps", "__spreadValues", "getHolidaysInRange", "startDate", "endDate", "currentDate", "holidaysForDay", "searchHolidays", "query", "lowercaseQuery", "getEasterRelatedHoliday", "offsetDays", "addHoliday", "removeHoliday", "holidayName", "index", "src_exports"]
}
