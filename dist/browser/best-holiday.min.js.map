{
  "version": 3,
  "sources": ["../../src/index.ts", "../../src/browser.ts"],
  "sourcesContent": ["// Private data and helper functions\nconst holidays = [\n  {\n    name: \"New Year's Day\",\n    date: (year: any) => new Date(year, 0, 1),\n    type: \"public\",\n    country: \"global\",\n  },\n  {\n    name: \"Christmas Day\",\n    date: (year: any) => new Date(year, 11, 25),\n    type: \"religious\",\n    country: \"global\",\n  },\n  {\n    name: \"Valentine's Day\",\n    date: (year: any) => new Date(year, 1, 14),\n    type: \"public\",\n    country: \"global\",\n  },\n  {\n    name: \"Independence Day\",\n    date: (year: any) => new Date(year, 6, 4),\n    type: \"public\",\n    country: \"US\",\n  },\n  {\n    name: \"Halloween\",\n    date: (year: any) => new Date(year, 9, 31),\n    type: \"public\",\n    country: \"US\",\n  },\n  {\n    name: \"Thanksgiving\",\n    date: (year: any) => {\n      const d = new Date(year, 10, 1);\n      while (d.getDay() !== 4) {\n        d.setDate(d.getDate() + 1);\n      }\n      d.setDate(d.getDate() + 21);\n      return d;\n    },\n    type: \"public\",\n    country: \"US\",\n  },\n  {\n    name: \"Labor Day\",\n    date: (year: any) => {\n      const d = new Date(year, 8, 1);\n      while (d.getDay() !== 1) {\n        d.setDate(d.getDate() + 1);\n      }\n      return d;\n    },\n    type: \"public\",\n    country: \"US\",\n  },\n  {\n    name: \"Memorial Day\",\n    date: (year: any) => {\n      const d = new Date(year, 4, 31);\n      while (d.getDay() !== 1) {\n        d.setDate(d.getDate() - 1);\n      }\n      return d;\n    },\n    type: \"public\",\n    country: \"US\",\n  },\n  {\n    name: \"Veterans Day\",\n    date: (year: any) => new Date(year, 10, 11),\n    type: \"public\",\n    country: \"US\",\n  },\n  {\n    name: \"Martin Luther King Jr. Day\",\n    date: (year: any) => {\n      const d = new Date(year, 0, 1);\n      while (d.getDay() !== 1) {\n        d.setDate(d.getDate() + 1);\n      }\n      d.setDate(d.getDate() + 14);\n      return d;\n    },\n    type: \"public\",\n    country: \"US\",\n  },\n  {\n    name: \"Good Friday\",\n    date: (year: any) => {\n      const easterSunday = movableHolidays\n        .find((h: any) => h.name === \"Easter Sunday\")\n        .calculate(year);\n      return addDays(easterSunday, -2);\n    },\n    type: \"religious\",\n    country: \"global\",\n  },\n  {\n    name: \"Boxing Day\",\n    date: (year: any) => new Date(year, 11, 26),\n    type: \"public\",\n    country: \"UK, Canada\",\n  },\n  {\n    name: \"Canada Day\",\n    date: (year: any) => new Date(year, 6, 1),\n    type: \"public\",\n    country: \"Canada\",\n  },\n  {\n    name: \"Australia Day\",\n    date: (year: any) => new Date(year, 0, 26),\n    type: \"public\",\n    country: \"Australia\",\n  },\n  {\n    name: \"Victoria Day\",\n    date: (year: any) => {\n      const d = new Date(year, 4, 25);\n      while (d.getDay() !== 1) {\n        d.setDate(d.getDate() - 1);\n      }\n      return d;\n    },\n    type: \"public\",\n    country: \"Canada\",\n  },\n  {\n    name: \"Remembrance Day\",\n    date: (year: any) => new Date(year, 10, 11),\n    type: \"public\",\n    country: \"Canada, UK\",\n  },\n  {\n    name: \"St. Patrick's Day\",\n    date: (year: any) => new Date(year, 2, 17),\n    type: \"public\",\n    country: \"Ireland\",\n  },\n  {\n    name: \"Bastille Day\",\n    date: (year: any) => new Date(year, 6, 14),\n    type: \"public\",\n    country: \"France\",\n  },\n  {\n    name: \"Cinco de Mayo\",\n    date: (year: any) => new Date(year, 4, 5),\n    type: \"public\",\n    country: \"Mexico\",\n  },\n];\n\nconst movableHolidays: any = [\n  {\n    name: \"Easter Sunday\",\n    calculate: (year: any) => {\n      // Easter calculation algorithm (Meeus/Jones/Butcher algorithm)\n      const a = year % 19;\n      const b = Math.floor(year / 100);\n      const c = year % 100;\n      const d = Math.floor(b / 4);\n      const e = b % 4;\n      const f = Math.floor((b + 8) / 25);\n      const g = Math.floor((b - f + 1) / 3);\n      const h = (19 * a + b - d - g + 15) % 30;\n      const i = Math.floor(c / 4);\n      const k = c % 4;\n      const l = (32 + 2 * e + 2 * i - h - k) % 7;\n      const m = Math.floor((a + 11 * h + 22 * l) / 451);\n      const month = Math.floor((h + l - 7 * m + 114) / 31) - 1;\n      const day = ((h + l - 7 * m + 114) % 31) + 1;\n      return new Date(year, month, day);\n    },\n    type: \"religious\",\n    country: \"global\",\n  },\n  {\n    name: \"Ash Wednesday\",\n    calculate: (year: any) => {\n      const easterSunday = movableHolidays\n        .find((h: any) => h.name === \"Easter Sunday\")\n        .calculate(year);\n      return addDays(easterSunday, -46);\n    },\n    type: \"religious\",\n    country: \"global\",\n  },\n  {\n    name: \"Palm Sunday\",\n    calculate: (year: any) => {\n      const easterSunday = movableHolidays\n        .find((h: any) => h.name === \"Easter Sunday\")\n        .calculate(year);\n      return addDays(easterSunday, -7);\n    },\n    type: \"religious\",\n    country: \"global\",\n  },\n  {\n    name: \"Pentecost\",\n    calculate: (year: any) => {\n      const easterSunday = movableHolidays\n        .find((h: any) => h.name === \"Easter Sunday\")\n        .calculate(year);\n      return addDays(easterSunday, 49);\n    },\n    type: \"religious\",\n    country: \"global\",\n  },\n  {\n    name: \"Ascension Day\",\n    calculate: (year: any) => {\n      const easterSunday = movableHolidays\n        .find((h: any) => h.name === \"Easter Sunday\")\n        .calculate(year);\n      return addDays(easterSunday, 39);\n    },\n    type: \"religious\",\n    country: \"global\",\n  },\n];\n\nfunction addDays(date: any, days: any) {\n  const result = new Date(date);\n  result.setDate(result.getDate() + days);\n  return result;\n}\n\nfunction isSameDay(date1: any, date2: any) {\n  return (\n    date1.getFullYear() === date2.getFullYear() &&\n    date1.getMonth() === date2.getMonth() &&\n    date1.getDate() === date2.getDate()\n  );\n}\n\nconst BestHoliday = {\n  getHolidaysForDay: function (date: Date, filters: any = {}) {\n    const year = date.getFullYear();\n    let allHolidays = [...holidays, ...movableHolidays];\n\n    // Apply filters\n    if (filters.types) {\n      const typeFilter = Array.isArray(filters.types)\n        ? filters.types\n        : [filters.types];\n      allHolidays = allHolidays.filter((h) => typeFilter.includes(h.type));\n    }\n    if (filters.countries) {\n      const countryFilter = Array.isArray(filters.countries)\n        ? filters.countries\n        : [filters.countries];\n      allHolidays = allHolidays.filter((h) =>\n        countryFilter.includes(h.country)\n      );\n    }\n\n    return allHolidays\n      .filter((holiday) => {\n        const holidayDate = holiday.calculate\n          ? holiday.calculate(year)\n          : typeof holiday.date === \"function\"\n          ? holiday.date(year)\n          : holiday.date;\n        return isSameDay(holidayDate, date);\n      })\n      .map((holiday) => ({\n        ...holiday,\n        date: holiday.calculate\n          ? holiday.calculate(year)\n          : typeof holiday.date === \"function\"\n          ? holiday.date(year)\n          : holiday.date,\n      }));\n  },\n\n  getHolidaysInRange: function (startDate: Date, endDate: Date, filters = {}) {\n    const result = [];\n    let currentDate = new Date(startDate);\n\n    while (currentDate <= endDate) {\n      const holidaysForDay = this.getHolidaysForDay(currentDate, filters);\n      if (holidaysForDay.length > 0) {\n        result.push({\n          date: new Date(currentDate),\n          holidays: holidaysForDay,\n        });\n      }\n      currentDate = addDays(currentDate, 1);\n    }\n\n    return result;\n  },\n\n  searchHolidays: function (query: string, year: number, filters: any = {}) {\n    const lowercaseQuery = query.toLowerCase();\n    let allHolidays = [...holidays, ...movableHolidays];\n\n    // Apply filters\n    if (filters.types) {\n      const typeFilter = Array.isArray(filters.types)\n        ? filters.types\n        : [filters.types];\n      allHolidays = allHolidays.filter((h) => typeFilter.includes(h.type));\n    }\n    if (filters.countries) {\n      const countryFilter = Array.isArray(filters.countries)\n        ? filters.countries\n        : [filters.countries];\n      allHolidays = allHolidays.filter((h) =>\n        countryFilter.includes(h.country)\n      );\n    }\n\n    return allHolidays\n      .filter(\n        (holiday) =>\n          holiday.name.toLowerCase().includes(lowercaseQuery) ||\n          holiday.type.toLowerCase().includes(lowercaseQuery) ||\n          holiday.country.toLowerCase().includes(lowercaseQuery)\n      )\n      .map((holiday) => ({\n        ...holiday,\n        date: holiday.calculate\n          ? holiday.calculate(year)\n          : typeof holiday.date === \"function\"\n          ? holiday.date(year)\n          : holiday.date,\n      }));\n  },\n\n  getEasterRelatedHoliday: function (year: number, offsetDays: number = 0) {\n    const easterSunday = movableHolidays\n      .find((h: any) => h.name === \"Easter Sunday\")\n      .calculate(year);\n    return addDays(easterSunday, offsetDays);\n  },\n\n  addHoliday: function (holiday: any) {\n    if (\n      typeof holiday.date === \"function\" ||\n      typeof holiday.calculate === \"function\"\n    ) {\n      holidays.push(holiday);\n    } else {\n      throw new Error(\n        \"Holiday must have a date function or calculate function\"\n      );\n    }\n  },\n\n  removeHoliday: function (holidayName: any) {\n    const index = holidays.findIndex((h) => h.name === holidayName);\n    if (index !== -1) {\n      holidays.splice(index, 1);\n    }\n  },\n};\n\nexport default BestHoliday;\n", "import * as BestHoliday from \"./index\";\n\n// Expose the functions to the global scope\n(window as any).BestHoliday = BestHoliday;\n"],
  "mappings": "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",
  "names": ["src_exports", "__export", "src_default", "holidays", "year", "d", "easterSunday", "movableHolidays", "h", "addDays", "a", "b", "c", "e", "f", "g", "i", "k", "l", "month", "day", "date", "days", "result", "isSameDay", "date1", "date2", "BestHoliday", "filters", "allHolidays", "typeFilter", "countryFilter", "holiday", "holidayDate", "__spreadProps", "__spreadValues", "startDate", "endDate", "currentDate", "holidaysForDay", "query", "lowercaseQuery", "offsetDays", "holidayName", "index", "src_default", "src_exports"]
}
